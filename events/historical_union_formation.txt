namespace = historical_union_formation

#Libya
historical_union_formation.1 = {
    type = country_event

    title = united_libya.t 					# Title of the event; ADD LOCALISATION
    desc = united_libya.d 					# Description of the event; ADD LOCALISATION
    #flavor = united_libya.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:LBY = { annex = ROOT }
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:LBY
			value = -100
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#United Arab Republic
historical_union_formation.2 = {
    type = country_event

    title = united_arab_republic.t 					# Title of the event; ADD LOCALISATION
    desc = united_arab_republic.d 					# Description of the event; ADD LOCALISATION
    #flavor = united_arab_republic.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:EGY
		this ?= c:EGY											# Change TAG of the overlord ****
		game_date >= 1958.2.22									# START DATE: Date colony became self governing ****
		game_date < 1968.2.22									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_nationalist_government = yes						# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		left_wing_ruling_coalition = yes						# Correct Ruling Coalition
		
		NOT = { exists = c:UAR }
		
		#Union candidate conditions
		exists = c:SYR
		c:SYR = { 												# Change TAG of the colony ****
			OR = { 
				is_a_nationalist_government = yes 
				is_a_republican_regime = yes 
				is_some_kind_of_democracy = yes 
			}
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = UAR_1958_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = UAR_1958_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option for Syria to accept
		c:SYR = { 
			trigger_event = { id = historical_union_formation.3 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#Major discontent
		add_radicals = {
			value = medium_radicals
			strata = rich
		}
		add_radicals = {
			value = small_radicals
			strata = middle
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#United Arab Republic - recipient
historical_union_formation.3 = {
    type = country_event

    title = united_arab_republic.t 					# Title of the event; ADD LOCALISATION
    desc = united_arab_republic.d 					# Description of the event; ADD LOCALISATION
    #flavor = united_arab_republic.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		c:EGY = {
			set_variable = UAR_formed_before
			annex = c:SYR
			every_scope_state = {
				limit = { state_region = { is_homeland = cu:syrian } }
				set_state_type = incorporated
			}
			change_tag = UAR
		}
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:EGY
			value = -100
		}
		
		ai_chance = {
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Arab Federation
historical_union_formation.4 = {
    type = country_event

    title = hashemite_arab_federation.t 				# Title of the event; ADD LOCALISATION
    desc = hashemite_arab_federation.d 					# Description of the event; ADD LOCALISATION
    #flavor = hashemite_arab_federation.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:IRQ
		this ?= c:IRQ											# Change TAG of the overlord ****
		game_date >= 1958.2.14									# START DATE: Date colony became self governing ****
		game_date < 1968.2.14									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_regime_monarchy = yes								# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		right_wing_ruling_coalition = yes						# Correct Ruling Coalition
		
		NOT = { exists = c:ARF }
		exists = c:UAR
		
		#Union candidate conditions
		exists = c:JOR
		c:JOR = { 												# Change TAG of the colony ****
			is_a_regime_monarchy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = ARF_1958_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = ARF_1958_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option for Jordan to accept
		c:JOR = { 
			trigger_event = { id = historical_union_formation.5 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Arab Federation - recipient
historical_union_formation.5 = {
    type = country_event

	title = hashemite_arab_federation.t 				# Title of the event; ADD LOCALISATION
    desc = hashemite_arab_federation.d 					# Description of the event; ADD LOCALISATION
    #flavor = hashemite_arab_federation.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	immediate = {
		c:IRQ = { save_scope_as = personal_union_leader_scope }
		save_scope_as = personal_union_junior_scope
	}
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		custom_tooltip = {
			text = personal_union.tt
			make_independent = yes
			c:IRQ = {
				set_variable = ARF_formed_before
			
				create_diplomatic_pact = {
					country = c:JOR										# Change TAG ****
					type = personal_union
				}
			}
		}
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:IRQ
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Union State of Russia and Belarus
historical_union_formation.6 = {
    type = country_event

    title = RUS_BYE_union.t 				# Title of the event; ADD LOCALISATION
    desc = RUS_BYE_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = RUS_BYE_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:RUS
		this ?= c:RUS											# Change TAG of the overlord ****
		game_date >= 1997.4.2									# START DATE: Date colony became self governing ****
		game_date < 2017.4.2									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_some_kind_of_democracy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:BYE
		c:BYE = { 												# Change TAG of the colony ****
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = RUS_BYE_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = RUS_BYE_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option for Belarus to accept
		c:BYE = { 
			trigger_event = { id = historical_union_formation.7 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Union State of Russia and Belarus - recipient
historical_union_formation.7 = {
    type = country_event

    title = RUS_BYE_union.t 				# Title of the event; ADD LOCALISATION
    desc = RUS_BYE_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = RUS_BYE_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		make_independent = yes
		c:RUS = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:RUS value = 100 }
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:RUS
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Senegambia Confederation
historical_union_formation.8 = {
    type = country_event

    title = SEN_GAM_union.t 				# Title of the event; ADD LOCALISATION
    desc = SEN_GAM_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = SEN_GAM_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SEN
		this ?= c:SEN											# Change TAG of the overlord ****
		game_date >= 1982.2.1									# START DATE: Date colony became self governing ****
		game_date < 1992.2.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_some_kind_of_democracy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:GAM
		c:GAM = { 												# Change TAG of the colony ****
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = SEN_GAM_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = SEN_GAM_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		c:GAM = { 
			trigger_event = { id = historical_union_formation.9 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Senegambia Confederation - recipient
historical_union_formation.9 = {
    type = country_event

    title = SEN_GAM_union.t 				# Title of the event; ADD LOCALISATION
    desc = SEN_GAM_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = SEN_GAM_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		make_independent = yes
		c:SEN = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:SEN value = 100 }
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:SEN
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Kashmir Accession to India - KAS
historical_union_formation.10 = {
    type = country_event

    title = KAS_HND_union.t 				# Title of the event; ADD LOCALISATION
    desc = KAS_HND_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = KAS_HND_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:KAS ?= this
		game_date >= 1947.10.26									# START DATE: Date colony became self governing ****
		game_date < 1957.10.26									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_monarchy = yes										# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:HND
		c:HND = { 												# Change TAG of the colony ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			is_adjacent_to_country = ROOT
		}
		
		#Cause of accession
		exists = c:PAK
		c:PAK = {
			is_sufficiently_independent = yes
			is_at_war = no
			is_adjacent_to_country = ROOT
		}
		
		# Event has not been fired before
		NOT = { has_variable = KAS_HND_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = KAS_HND_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		c:HND = { 
			trigger_event = { id = historical_union_formation.11 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Kashmir Acession to India - HND
historical_union_formation.11 = {
    type = country_event

    title = KAS_HND_union.t 				# Title of the event; ADD LOCALISATION
    desc = KAS_HND_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = KAS_HND_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		annex = c:KAS
		
		#Partition Kashmir
		if = {
			limit = { 
				owns_entire_state_region = STATE_KASHMIR 
				exists = c:PAK
			}
			s:STATE_KASHMIR = {
				set_owner_of_provinces = {
					country = c:PAK
					provinces = { x6326A6 x37C3E4 x00161D x150D2C xCDB7DB xB0FE2D x963360 x07D342 x504561 x1F1AF7 x2FF385 xF48515 x15F552 x2969A3 x5A0252 xB4AA65 xD25436 x43B99F xF8D822 xF28F90 }
				}
			}
		}
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:KAS
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Netherlands-Indonesia Union
historical_union_formation.12 = {
    type = country_event

    title = NET_IDO_union.t 				# Title of the event; ADD LOCALISATION
    desc = NET_IDO_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = NET_IDO_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#1946 start date only
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		exists = c:NET
		this ?= c:NET											# Change TAG of the overlord ****
		game_date >= 1946.1.1									# START DATE: Date colony became self governing ****
		game_date < 1956.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:IDO
		c:IDO = { 												# Change TAG of the colony ****
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = NET_IDO_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = NET_IDO_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		c:IDO = { 
			trigger_event = { id = historical_union_formation.13 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Netherlands-Indonesia Union - recipient
historical_union_formation.13 = {
    type = country_event

    title = NET_IDO_union.t 				# Title of the event; ADD LOCALISATION
    desc = NET_IDO_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = NET_IDO_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		hidden_effect = { make_independent = yes }
		c:NET = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:NET value = 100 }
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:NET
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}
namespace = eastern_europe_sovietisation

#Option for USSR to make satellites
eastern_europe_sovietisation.1 = {
    type = country_event
	placement = scope:eastern_europe_sovietisation_target
	
    title = eastern_europe_sovietisation.t 						# Title of the event; ADD LOCALISATION
    desc = eastern_europe_sovietisation.d 						# Description of the event; ADD LOCALISATION
    flavor = eastern_europe_sovietisation.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

	icon = "gfx/interface/icons/invention_icons/socialism.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1945.1.1									# START DATE: Date colony became self governing ****
		game_date < 1955.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Cold War
		cold_war_ongoing = yes
		
		#Potential EE states
		OR = {
			c:POL ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1947.2.19 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			c:HUN ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1947.5.31 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			c:ROM ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1947.12.30 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			c:CZH ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1948.2.25 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			c:BUL ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1946.9.15 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
		}
		
    }
	
	immediate = { 
		
		save_scope_as = eastern_europe_sovietisation_initiator
		
		#Stagger sovietisation
		if = {
			limit = { 
				c:POL ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1947.2.19 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			}
			c:POL = {
				save_scope_as = eastern_europe_sovietisation_target
			}
		}
		else_if = {
			limit = { 
				c:HUN ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1947.5.31 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			}
			c:HUN = {
				save_scope_as = eastern_europe_sovietisation_target
			}
		}
		else_if = {
			limit = { 
				c:ROM ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1947.12.30 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			}
			c:ROM = {
				save_scope_as = eastern_europe_sovietisation_target
			}
		}
		else_if = {
			limit = { 
				c:CZH ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1948.2.25 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			}
			c:CZH = {
				save_scope_as = eastern_europe_sovietisation_target
			}
		}
		else_if = {
			limit = { 
				c:BUL ?= { is_a_democracy = yes has_diplomatic_pact = { who = ROOT type = protectorate is_initiator = no } game_date >= 1946.9.15 NOT = { has_variable = eastern_europe_sovietisation_rejected } }
			}
			c:BUL = {
				save_scope_as = eastern_europe_sovietisation_target
			}
		}
		
	}
    
    option = {
        name = eastern_europe_sovietisation.option.1				# Install communism
        highlighted_option = yes
		
		#Ultimatum to sovietisation Target
		scope:eastern_europe_sovietisation_target ?= {
			trigger_event = { id = eastern_europe_sovietisation.2 }
			set_variable = eastern_europe_sovietisation_rejected
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = eastern_europe_sovietisation.option.2				# Let them be independent
		default_option = yes
		
		#Leave Target alone
		scope:eastern_europe_sovietisation_target ?= {
			set_variable = eastern_europe_sovietisation_rejected
		}
		
		#Domestic reaction
		add_radicals = {
			value = medium_radicals
			strata = poor
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Option to refuse satellite
eastern_europe_sovietisation.2 = {
    type = country_event
	
    title = eastern_europe_sovietisation.t 						# Title of the event; ADD LOCALISATION
    desc = eastern_europe_sovietisation.d 						# Description of the event; ADD LOCALISATION
    flavor = eastern_europe_sovietisation.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/invention_icons/socialism.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by an event
		
    }
	
	immediate = { 
		
		save_scope_as = eastern_europe_sovietisation_target
		
	}
    
    option = {
        name = eastern_europe_sovietisation_target.option.1			# Accept
        highlighted_option = yes
		
		# Laws
		effect_starting_politics_communist_republic = yes
		effect_starting_politics_dictatorship = yes
		effect_starting_politics_constitutional_unitary_state = yes
		effect_starting_politics_war_policy_pro_military = yes
		effect_starting_politics_economic_policy_planned_economy = yes
		effect_starting_politics_trade_policy_protectionism = yes
		effect_starting_politics_anti_nuclear_policy = yes
		
		effect_starting_politics_specialisation_manufacturing = yes
		
		effect_starting_politics_fiat_standard = yes
		
		# Become a Satellite state of USSR
		hidden_effect = { make_independent = yes }
		c:SOV = {
			create_diplomatic_pact = {
				country = ROOT
				type = satellite
			}
			set_relations = { country = ROOT value = 100 }
		}
		
		# Set Ruler
		random_scope_character = {
			limit = { interest_group = { is_interest_group_type = ig_trade_unions } }
			set_character_as_ruler = yes
		}
		
		#Force correct ruler
		if = {
			limit = { 
				c:POL ?= this 
				ruler ?= { 
					NAND = { 
						is_historical = yes
						interest_group = { is_interest_group_type = ig_trade_unions }
					} 
				}
			}
			create_character = {
				first_name = "boleslaw_bierut_first_name"
				last_name = "boleslaw_bierut_last_name"
				ruler = yes ig_leader = yes historical = yes
				birth_date = 1892.4.18
				interest_group = ig_trade_unions
				ideology = ideology_autocratic
				religion = rel:atheist
				traits = {
					cruel
					wrathful
					demagogue
				}
			}
		}
		if = {
			limit = { 
				c:HUN ?= this 
				ruler ?= { 
					NAND = { 
						is_historical = yes
						interest_group = { is_interest_group_type = ig_trade_unions }
					} 
				}
			}
			create_character = {
				first_name = "arpad_szakasits_first_name"
				last_name = "arpad_szakasits_last_name"
				ruler = yes ig_leader = yes historical = yes
				birth_date = 1888.12.6
				interest_group = ig_trade_unions
				ideology = ideology_power_hungry
				religion = rel:atheist
				traits = {
					tactful
					reserved
					demagogue
				}
			}
		}
		if = {
			limit = { 
				c:ROM ?= this 
				ruler ?= { 
					NAND = { 
						is_historical = yes
						interest_group = { is_interest_group_type = ig_trade_unions }
					} 
				}
			}
			create_character = {
				first_name = "arpad_szakasits_first_name"
				last_name = "arpad_szakasits_last_name"
				ruler = yes ig_leader = yes historical = yes
				birth_date = 1888.12.6
				interest_group = ig_trade_unions
				ideology = ideology_power_hungry
				religion = rel:atheist
				traits = {
					tactful
					reserved
					demagogue
				}
			}
		}
		if = {
			limit = { 
				c:CZH ?= this 
				ruler ?= { 
					NAND = { 
						is_historical = yes
						interest_group = { is_interest_group_type = ig_trade_unions }
					} 
				}
			}
			create_character = {
				first_name = "klement_gottwald_first_name"
				last_name = "klement_gottwald_last_name"
				ruler = yes ig_leader = yes historical = yes
				birth_date = 1896.11.23
				interest_group = ig_trade_unions
				ideology = ideology_autocratic
				religion = rel:atheist
				traits = {
					ambitious
					wrathful
					demagogue
				}
			}
		}
		if = {
			limit = { 
				c:BUL ?= this 
				ruler ?= { 
					NAND = { 
						is_historical = yes
						interest_group = { is_interest_group_type = ig_trade_unions }
					} 
				}
			}
			create_character = {
				first_name = "valko_chervenkov_first_name"
				last_name = "valko_chervenkov_last_name"
				ruler = yes ig_leader = yes historical = yes
				birth_date = 1900.9.6
				interest_group = ig_trade_unions
				ideology = ideology_autocratic
				religion = rel:atheist
				traits = {
					tactful
					meticulous
					demagogue
				}
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = eastern_europe_sovietisation_target.option.2			# REFUSE
		default_option = yes
		
		#USSR will attack this country
		c:SOV = {
			create_diplomatic_play = {
				name = soviet_war
				type = dp_make_dominion
				target_country = ROOT
				
				add_war_goal = {
					holder = c:SOV
					type = regime_change
					target_country = ROOT
				}
				add_war_goal = {
					holder = ROOT
					type = independence
					target_country = c:SOV
				}
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Turkish Straits Crisis - SOV
eastern_europe_sovietisation.3 = {
    type = country_event
	placement = c:TUR
	
    title = Turkish_Straits_Crisis.t 							# Title of the event; ADD LOCALISATION
    desc = Turkish_Straits_Crisis.d 							# Description of the event; ADD LOCALISATION
    #flavor = Turkish_Straits_Crisis.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#1946 only
		has_global_variable = 1946_start_date
		
		# Event has not been fired before
		NOT = { has_variable = Turkish_Straits_Crisis }			# CHANGE ****
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1946.8.7									# START DATE: Date colony became self governing ****
		game_date < 1956.8.7									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes
		is_sufficiently_independent = yes						# is_vassal = no
		is_not_neutral = yes
		
		#Kars
		has_state_in_state_region = STATE_KARS
		
		#Turkey conditions
		exists = c:TUR
		c:TUR = {
			NOT = { is_a_communist_government = yes }
			is_sufficiently_independent = yes						# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_KARS
			has_state_in_state_region = STATE_EASTERN_THRACE
			has_state_in_state_region = STATE_HUDAVENDIGAR
			
			is_adjacent_to_country = ROOT
			
			NOT = { is_subject_of = ROOT }
		}
		
    }
	
	immediate = { 
		
		# Fire only once
		set_variable = Turkish_Straits_Crisis					# Change variable ****
		
	}
    
    option = {
        name = Turkish_Straits_Crisis.1.option.1				# Yes
        highlighted_option = yes
		
		c:TUR = {
			trigger_event = { id = eastern_europe_sovietisation.4 }
		}
		
		create_diplomatic_pact = {
			country = c:TUR
			type = embargo
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Turkish_Straits_Crisis.1.option.2				# No
		default_option = yes
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Turkish Straits Crisis - TUR
eastern_europe_sovietisation.4 = {
    type = country_event
	
    title = Turkish_Straits_Crisis.t 							# Title of the event; ADD LOCALISATION
    desc = Turkish_Straits_Crisis.d 							# Description of the event; ADD LOCALISATION
    #flavor = Turkish_Straits_Crisis.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		
		
	}
    
    option = {
        name = Turkish_Straits_Crisis.2.option.1				# Yes
        highlighted_option = yes
		
		c:SOV = {
			trigger_event = { id = eastern_europe_sovietisation.5 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Turkish_Straits_Crisis.2.option.2				# No
		default_option = yes
		
		hidden_effect = { make_independent = yes }
		
		#TUR becomes a SOV satellite state and cedes Kars to SOV
		c:SOV = {
			create_diplomatic_pact = {
				country = c:TUR
				type = satellite
			}
		}
		c:TUR = {
			random_scope_state = {
				limit = { state_region = s:STATE_KARS }
				set_state_owner = c:SOV
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Turkish Straits Crisis - SOV
eastern_europe_sovietisation.5 = {
    type = country_event
	placement = c:TUR
	
    title = Turkish_Straits_Crisis.3.t 							# Title of the event; ADD LOCALISATION
    desc = Turkish_Straits_Crisis.3.d 							# Description of the event; ADD LOCALISATION
    #flavor = Turkish_Straits_Crisis.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:TUR = {
			random_scope_state = {
				limit = { state_region = s:STATE_KARS }
				save_scope_as = kars_target_state
			}
		}
		
	}
    
    option = {
        name = Turkish_Straits_Crisis.3.option.1				# De-escalate
        highlighted_option = yes
		
		add_radicals = {
			value = small_radicals
			interest_group = ig:ig_trade_unions
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Turkish_Straits_Crisis.3.option.2				# Escalate
		default_option = yes
		
		#Declare war on Turkey
		create_diplomatic_play = {
			name = Turkish_Straits_Crisis
			type = dp_make_dominion
			target_country = c:TUR
			
			add_war_goal = {
				holder = ROOT
				type = conquer_state
				target_state = scope:kars_target_state
			}
			
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Berlin Crisis of 1961 - SOV
eastern_europe_sovietisation.6 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Crisis.t 									# Title of the event; ADD LOCALISATION
    desc = Berlin_Crisis.d 										# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Crisis.f 									# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Event has not been fired before
		NOT = { has_variable = Berlin_Crisis }					# CHANGE ****
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1961.6.4									# START DATE: Date colony became self governing ****
		game_date < 1971.6.4									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes
		is_sufficiently_independent = yes						# is_vassal = no
		is_not_neutral = yes
		
		country_rank = rank_value:super_power
		
		#Khrushchev
		exists = ruler
		ruler = { interest_group = { is_interest_group_type = ig_rural_folk } is_historical = yes }
		
		#Historical conditions
		exists = c:USA
		c:USA = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			country_rank = rank_value:super_power
		}
		exists = c:WGR
		c:WGR = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_BRANDENBURG
			
			is_subject_of = c:USA
		}
		exists = c:EGR
		c:EGR = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_BRANDENBURG
			
			is_adjacent_to_country = c:WGR
			
			is_subject_of = ROOT
		}
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
		# Fire only once
		set_variable = Berlin_Crisis							# Change variable ****
		
	}
    
    option = {
        name = Berlin_Crisis.1.option.1							# Yes
        highlighted_option = yes
		
		c:USA = {
			trigger_event = { id = eastern_europe_sovietisation.7 }
		}
		
		if = {
			limit = { c:WGR = { market.owner = c:USA } }
			create_diplomatic_pact = {
				country = c:USA
				type = embargo
			}
		}
		if = {
			limit = { c:WGR = { leads_customs_union = yes } }
			create_diplomatic_pact = {
				country = c:WGR
				type = embargo
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Crisis.1.option.2							# No
		default_option = yes
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Berlin Crisis of 1961 - USA
eastern_europe_sovietisation.7 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Crisis.t 							# Title of the event; ADD LOCALISATION
    desc = Berlin_Crisis.d 								# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Crisis.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {											# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
	}
    
    option = {
        name = Berlin_Crisis.2.option.1					# Yes
        highlighted_option = yes
		
		c:SOV = {
			trigger_event = { id = eastern_europe_sovietisation.8 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Crisis.2.option.2					# No
		default_option = yes
		
		#Transfer Berlin to East Germany
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				set_state_owner = c:EGR
			}
		}
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Berlin Crisis of 1961 - SOV
eastern_europe_sovietisation.8 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Crisis.3.t 							# Title of the event; ADD LOCALISATION
    desc = Berlin_Crisis.3.d 							# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Crisis.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {											# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
	}
    
    option = {
        name = Berlin_Crisis.3.option.1					# De-escalate
        highlighted_option = yes
		
		add_radicals = {
			value = small_radicals
			interest_group = ig:ig_trade_unions
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Crisis.3.option.2					# Escalate
		default_option = yes
		
		#East Germany declares war on West Germany
		c:EGR = {
			create_diplomatic_play = {
				name = Berlin_Crisis
				type = dp_annex_war_historical
				target_country = c:WGR
				
				add_war_goal = {
					holder = c:WGR
					type = annex_country
					target_country = c:EGR
				}
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Berlin Ultimatum of 1958 - SOV
eastern_europe_sovietisation.9 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Ultimatum.t 									# Title of the event; ADD LOCALISATION
    desc = Berlin_Ultimatum.d 									# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Ultimatum.f 								# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Event has not been fired before
		NOT = { has_variable = Berlin_Ultimatum }				# CHANGE ****
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1958.11.1									# START DATE: Date colony became self governing ****
		game_date < 1968.11.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes
		is_sufficiently_independent = yes						# is_vassal = no
		is_not_neutral = yes
		
		country_rank = rank_value:super_power
		
		#Khrushchev
		exists = ruler
		ruler = { interest_group = { is_interest_group_type = ig_rural_folk } is_historical = yes }
		
		#Historical conditions
		exists = c:USA
		c:USA = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			country_rank = rank_value:super_power
		}
		exists = c:WGR
		c:WGR = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_BRANDENBURG
			
			is_subject_of = c:USA
		}
		exists = c:EGR
		c:EGR = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_BRANDENBURG
			
			is_adjacent_to_country = c:WGR
			
			is_subject_of = ROOT
		}
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
		# Fire only once
		set_variable = Berlin_Ultimatum							# Change variable ****
		
	}
    
    option = {
        name = Berlin_Ultimatum.1.option.1						# Yes
        highlighted_option = yes
		
		c:USA = {
			trigger_event = { id = eastern_europe_sovietisation.10 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Ultimatum.1.option.2						# No
		default_option = yes
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Berlin Ultimatum of 1958 - USA
eastern_europe_sovietisation.10 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Ultimatum.t 								# Title of the event; ADD LOCALISATION
    desc = Berlin_Ultimatum.d 								# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Ultimatum.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {												# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
	}
    
    option = {
        name = Berlin_Ultimatum.2.option.1					# Yes
        highlighted_option = yes
		
		c:SOV = {
			trigger_event = { id = eastern_europe_sovietisation.11 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Ultimatum.2.option.2					# No
		default_option = yes
		
		#Create neutral Free City of Berlin
		c:WGR = {
			#Release country
			create_country = {
				tag = FCB										# Change TAG of country being released ****
				origin = ROOT									# TAG where the created country takes tech from
				state = scope:berlin_target_state
				
				on_created = {									# Set government laws & rulers here
					
					# SET laws for colony ****
					effect_starting_politics_parliamentary_republic = yes
					effect_starting_politics_very_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_pacifism = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_free_trade = yes
					effect_starting_politics_anti_nuclear_policy = yes
					
					# Set diplomatic recognition
					set_country_type = unrecognized
				}
				
			}
		}
		if = {
			limit = { exists = c:FCB }
			create_diplomatic_pact = {
				country = c:FCB
				type = protectorate
			}
		}
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Berlin Ultimatum of 1958 - SOV
eastern_europe_sovietisation.11 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Ultimatum.3.t 							# Title of the event; ADD LOCALISATION
    desc = Berlin_Ultimatum.3.d 							# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Ultimatum.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {												# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
	}
    
    option = {
        name = Berlin_Ultimatum.3.option.1					# De-escalate
        highlighted_option = yes
		
		add_radicals = {
			value = small_radicals
			interest_group = ig:ig_trade_unions
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Ultimatum.3.option.2					# Escalate
		default_option = yes
		
		#East Germany declares war on West Germany
		c:EGR = {
			create_diplomatic_play = {
				name = Berlin_Ultimatum
				type = dp_annex_war_historical
				target_country = c:WGR
				
				add_war_goal = {
					holder = c:WGR
					type = annex_country
					target_country = c:EGR
				}
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Berlin Blockade of 1948 - SOV
eastern_europe_sovietisation.12 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Blockade.t 										# Title of the event; ADD LOCALISATION
    desc = Berlin_Blockade.d 										# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Blockade.f 									# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#1946 only
		has_global_variable = 1946_start_date
		
		# Event has not been fired before
		NOT = { has_variable = Berlin_Blockade }					# CHANGE ****
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1948.6.24									# START DATE: Date colony became self governing ****
		game_date < 1958.6.24									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes
		is_sufficiently_independent = yes						# is_vassal = no
		is_not_neutral = yes
		
		country_rank = rank_value:super_power
		
		#Stalin
		exists = ruler
		ruler = { interest_group = { is_interest_group_type = ig_trade_unions } is_historical = yes }
		
		#Historical conditions
		exists = c:USA
		c:USA = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			country_rank = rank_value:super_power
		}
		exists = c:WGR
		c:WGR = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_BRANDENBURG
			
			is_subject_of = c:USA
		}
		exists = c:EGR
		c:EGR = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			is_not_neutral = yes
			
			has_state_in_state_region = STATE_BRANDENBURG
			
			is_adjacent_to_country = c:WGR
			
			is_subject_of = ROOT
		}
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
		# Fire only once
		set_variable = Berlin_Blockade							# Change variable ****
		
	}
    
    option = {
        name = Berlin_Blockade.1.option.1							# Yes
        highlighted_option = yes
		
		c:USA = {
			trigger_event = { id = eastern_europe_sovietisation.13 }
		}
		
		if = {
			limit = { c:WGR = { market.owner = c:USA } }
			create_diplomatic_pact = {
				country = c:USA
				type = embargo
			}
		}
		if = {
			limit = { c:WGR = { leads_customs_union = yes } }
			create_diplomatic_pact = {
				country = c:WGR
				type = embargo
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Blockade.1.option.2							# No
		default_option = yes
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Berlin Blockade of 1948 - USA
eastern_europe_sovietisation.13 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Blockade.t 								# Title of the event; ADD LOCALISATION
    desc = Berlin_Blockade.d 								# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Blockade.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {											# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
	}
    
    option = {
        name = Berlin_Blockade.2.option.1					# Yes
        highlighted_option = yes
		
		c:SOV = {
			trigger_event = { id = eastern_europe_sovietisation.14 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Blockade.2.option.2					# No
		default_option = yes
		
		#Transfer Berlin to East Germany
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				set_state_owner = c:EGR
			}
		}
		
		add_modifier = { 
			name = national_humiliation 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Berlin Blockade of 1948 - SOV
eastern_europe_sovietisation.14 = {
    type = country_event
	placement = scope:berlin_target_state
	
    title = Berlin_Blockade.3.t 							# Title of the event; ADD LOCALISATION
    desc = Berlin_Blockade.3.d 								# Description of the event; ADD LOCALISATION
    #flavor = Berlin_Blockade.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {												# What triggers the event, if using other events or journal entries leave empty
		
		# Triggered by event
		
    }
	
	immediate = { 
		
		c:WGR = {
			random_scope_state = {
				limit = { state_region = s:STATE_BRANDENBURG }
				save_scope_as = berlin_target_state
			}
		}
		
	}
    
    option = {
        name = Berlin_Blockade.3.option.1					# De-escalate
        highlighted_option = yes
		
		add_radicals = {
			value = small_radicals
			interest_group = ig:ig_trade_unions
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = Berlin_Blockade.3.option.2					# Escalate
		default_option = yes
		
		#East Germany declares war on West Germany
		c:EGR = {
			create_diplomatic_play = {
				name = Berlin_Blockade
				type = dp_annex_war_historical
				target_country = c:WGR
				
				add_war_goal = {
					holder = c:WGR
					type = annex_country
					target_country = c:EGR
				}
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}